# -*- coding: utf-8 -*-
"""
Created on Sun Nov 17 23:34:28 2019

@author: User

"""

#6733 - Homework 7 - Greg Meyer

from __future__ import print_function
import time
start = time.time()
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os
end = time.time()
print(end - start)

start = time.time()
batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = True
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'models')
model_name = 'cifar10Model.h5'

# The data, split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
end = time.time()
print(end - start)

start = time.time()
cifar10Model = Sequential()
cifar10Model.add(Conv2D(32, (3, 3), padding='same',input_shape=x_train.shape[1:]))
cifar10Model.add(Activation('relu'))
cifar10Model.add(Conv2D(64, (3, 3)))
cifar10Model.add(Activation('relu'))
cifar10Model.add(MaxPooling2D(pool_size=(2, 2)))
cifar10Model.add(Dropout(0.25))

#model.add(Conv2D(64, (3, 3), padding='same'))
#model.add(Activation('relu'))
#model.add(Conv2D(64, (3, 3)))
#model.add(Activation('relu'))
#model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Dropout(0.25))

cifar10Model.add(Flatten())
#model.add(Dense(512))
cifar10Model.add(Dense(256))
cifar10Model.add(Activation('relu'))
cifar10Model.add(Dropout(0.5))
cifar10Model.add(Dense(num_classes))
cifar10Model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.RMSprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
cifar10Model.compile(loss='categorical_crossentropy',optimizer=opt,metrics=['accuracy'])
end = time.time()
print(end - start)

start = time.time()
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

#ImageDataGenerator produces additional transformed images from imput images
datagen = ImageDataGenerator(featurewise_center=False,samplewise_center=False, featurewise_std_normalization=False, 
        samplewise_std_normalization=False,zca_whitening=False,
        rotation_range=10,width_shift_range=0.1, height_shift_range=0.1, 
        shear_range=0.1,zoom_range=0.1,channel_shift_range=0.,fill_mode='nearest',cval=0., 
        horizontal_flip=True,vertical_flip=False,  
        rescale=None,preprocessing_function=None,data_format=None,validation_split=0.1) 
datagen.fit(x_train)

# Fit the model on the batches generated by datagen.flow
cifar10Model.fit_generator(datagen.flow(x_train, y_train,batch_size=batch_size),epochs=epochs, steps_per_epoch = 2, validation_data=(x_test, y_test),workers=4)

# Save model and weights
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
cifar10Model.fit(x_train, y_train,batch_size=batch_size,epochs=epochs,validation_data=(x_test, y_test),shuffle=True)
end = time.time()
print(end - start)

start = time.time()
# Score trained model.
scores = cifar10Model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])
end = time.time()
print(end - start)